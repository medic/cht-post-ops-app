{
  "locales": [
    {
      "code": "en",
      "name": "English"
    },
    {
      "code": "es",
      "name": "Español (Spanish)"
    },
    {
      "code": "fr",
      "name": "Français (French)"
    },
    {
      "code": "ne",
      "name": "नेपाली (Nepali)"
    },
    {
      "code": "sw",
      "name": "Kiswahili (Swahili)"
    }
  ],
  "locale": "en",
  "locale_outgoing": "en",
  "muvuku_webapp_url": "/medic-reporter/_design/medic-reporter/_rewrite/?_embed_mode=2&_locale=en#/generic-anc.json",
  "date_format": "ddd, MMM Do, YYYY",
  "reported_date_format": "ddd, MMM Do, YYYY [at] h:mm A",
  "forms_only_mode": false,
  "default_responses": {
    "start_date": "1970-01-01"
  },
  "district_admins_access_unallocated_messages": true,
  "public_access": false,
  "default_country_code": "263",
  "gateway_number": "+263782709352",
  "kujua-reporting": [
    {
      "code": "",
      "reporting_freq": "weekly"
    }
  ],
  "anc_forms": {},
  "schedule_morning_hours": 6,
  "schedule_morning_minutes": 0,
  "schedule_evening_hours": 20,
  "schedule_evening_minutes": 0,
  "synthetic_date": "",
  "contact_display_short": "clinic.name",
  "permissions": {
    "can_export_messages": [
      "national_admin",
      "district_admin",
      "analytics"
    ],
    "can_export_forms": [
      "national_admin",
      "district_admin",
      "analytics"
    ],
    "can_export_contacts": [
      "national_admin",
      "district_admin"
    ],
    "can_export_audit": [
      "national_admin",
      "district_admin"
    ],
    "can_export_feedback": [
      "national_admin"
    ],
    "can_export_server_logs": [
      "national_admin"
    ],
    "can_access_directly": [
      "national_admin"
    ],
    "can_view_analytics": [
      "national_admin",
      "district_admin",
      "analytics"
    ],
    "can_view_data_records": [
      "national_admin",
      "district_admin",
      "read_only",
      "analytics",
      "gateway"
    ],
    "can_view_unallocated_data_records": [
      "national_admin",
      "district_admin",
      "read_only",
      "gateway"
    ],
    "can_view_users": [
      "national_admin",
      "read_only"
    ],
    "can_edit": [
      "national_admin",
      "district_admin",
      "gateway"
    ],
    "can_update_messages": [
      "national_admin",
      "district_admin",
      "gateway"
    ],
    "can_update_users": [
      "national_admin"
    ],
    "can_update_people": [
      "national_admin"
    ],
    "can_update_places": [
      "national_admin"
    ],
    "can_create_records": [
      "national_admin",
      "district_admin",
      "data_entry",
      "gateway"
    ],
    "can_access_gateway_api": [
      "gateway"
    ],
    "can_create_users": [
      "national_admin"
    ],
    "can_create_people": [
      "national_admin"
    ],
    "can_create_places": [
      "national_admin"
    ],
    "can_view_tasks": [
      "national_admin",
      "district_admin",
      "offline_limited"
    ],
    "can_view_tasks_tab": [
      "national_admin",
      "district_admin",
      "offline_limited"
    ],
    "can_configure": [
      "national_admin"
    ],
    "can_view_messages": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited"
    ],
    "can_view_messages_tab": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited"
    ],
    "can_view_reports": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited"
    ],
    "can_view_reports_tab": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited"
    ],
    "can_view_analytics_tab": [
      "national_admin",
      "district_admin"
    ],
    "can_view_contacts": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited"
    ],
    "can_view_contacts_tab": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited"
    ],
    "can_edit_profile": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_reports": [
      "national_admin",
      "district_admin"
    ],
    "can_bulk_delete_reports": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_contacts": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_messages": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_users": [
      "national_admin"
    ],
    "can_view_message_action": [
      "national_admin",
      "district_admin"
    ],
    "can_view_call_action": [
      "national_admin",
      "district_admin"
    ],
    "can_log_out_on_android": [
      "national_admin",
      "district_admin",
      "offline_limited"
    ]
  },
  "roles": {
    "data_entry": {
      "name": "usertype.data-entry"
    },
    "analytics": {
      "name": "usertype.analytics"
    },
    "gateway": {
      "name": "usertype.gateway"
    },
    "national_admin": {
      "name": "usertype.national-manager"
    },
    "district_admin": {
      "name": "usertype.district-manager",
      "offline": true
    },
    "read_only": {
      "name": "usertype.read-only"
    },
    "offline_limited": {
      "name": "usertype.offline-limited",
      "offline": true
    }
  },
  "setup_complete": true,
  "care_coordinator": "chw",
  "anc_registration_lmp": true,
  "statistics_submission": "none",
  "outgoing_phone_replace": {
    "match": "",
    "replace": ""
  },
  "outgoing_phone_filters": [
    {
      "match": "",
      "replace": ""
    }
  ],
  "id_format": "1111",
  "statistics_submission_number": "",
  "replication_depth": [
    {
      "role": "",
      "depth": 2
    }
  ],
  "replications": [
    {
      "fromSuffix": "user-[^\\-]+-meta",
      "toSuffix": "users-meta",
      "text_expression": "",
      "cron": "0 2 * * *"
    }
  ],
  "alerts": [],
  "reminders": [],
  "registrations": [
    {
      "form": "0",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "1",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "Y",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "N",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    }
  ],
  "patient_reports": [
    {
      "form": "followup",
      "validations": {},
      "messages": [
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.fields.language_preference == 'english'",
          "translation_key": "eng.messages.2wt.notification",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.fields.language_preference == 'shona'",
          "translation_key": "shona.messages.2wt.notification",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.fields.language_preference == 'ndebele'",
          "translation_key": "ndebele.messages.2wt.notification",
          "recipient": "phone"
        }
      ]
    },
    {
      "form": "1",
      "messages": [
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.patient.language_preference == 'english'",
          "translation_key": "eng.messages.2wt.potential.ae.response",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.patient.language_preference == 'shona'",
          "translation_key": "shona.messages.2wt.potential.ae.response",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.patient.language_preference == 'ndebele'",
          "translation_key": "ndebele.messages.2wt.potential.ae.response",
          "recipient": "phone"
        }
      ]
    }
  ],
  "schedules": [],
  "tasks": {
    "rules": "define Target { _id: null, contact: null, deleted: null, type: null, pass: null, date: null, groupBy: null }\ndefine Contact { contact: null, reports: null, tasks: null }\ndefine Task { _id: null, deleted: null, doc: null, contact: null, icon: null, date: null, readyStart: null, readyEnd: null, title: null, fields: null, resolved: null, priority: null, priorityLabel: null, reports: null, actions: null }\nrule GenerateEvents {\n  when { c: Contact } then { !function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(t,'__esModule',{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&'object'==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,'default',{enumerable:!0,value:t}),2&e&&'string'!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,'a',e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p='',o(o.s=1)}([function(t,e){t.exports=function(t){var e={};!function t(e,o){var n=Object.keys(e);for(var r in n){var a=n[r];switch(typeof e[a]){case'object':t(e[a],o);break;case'function':e[a]=e[a].bind(o)}}}(t,e),e.definition=function t(e){var o=Object.assign({},e),n=Object.keys(o);for(var r in n){var a=n[r];if(Array.isArray(o[a])){o[a]=o[a].slice(0);for(var i=0;i<o[a].length;++i)'object'==typeof o[a][i]&&(o[a][i]=t(o[a][i]))}else'object'==typeof o[a]&&(o[a]=t(o[a]))}return o}(t)}},function(t,e,o){var n=o(2),r=o(4),a=o(5);o(6)(r,c,Utils,Target,emit),a(n,c,Utils,Task,emit),emit('_complete',{_id:!0})},function(t,e,o){const n=o(3);t.exports=[n,{name:'no-contact',icon:'off',title:'task.no-contact.title',appliesTo:'reports',appliesToType:['enroll','client_review'],contactLabel:function(t){return t.contact.name+' ('+t.contact.enrollment_location+')'},appliesIf:(t,e)=>{if('client_review'===e.form)return'enroll'===e.form||'client_review'===e.form&&'no'===Utils.getField(e,'n.tracing_method')},resolvedIf:(t,e,o,n)=>{const r=Utils.isFormSubmittedInWindow(t.reports,'no_contact',e.reported_date,Utils.addDate(n,o.end+1).getTime()),a=Utils.isFormSubmittedInWindow(t.reports,'0',e.reported_date,Utils.addDate(n,1).getTime()),i=Utils.isFormSubmittedInWindow(t.reports,'1',e.reported_date,Utils.addDate(n,1).getTime());return r||a||i},actions:[{form:'no_contact',label:'No Contact',modifyContent:function(t){t.is_task=!0,t.task_shows_on_day=8}}],events:[{days:8,start:0,end:365}]},{name:'no-contact-minor',icon:'minor-danger',title:'task.no-contact.title',appliesTo:'reports',appliesToType:['enroll'],contactLabel:function(t){return t.contact.name+' ('+t.contact.enrollment_location+')'},appliesIf:t=>'yes'===t.contact.is_minor,resolvedIf:(t,e,o,n)=>{const r=Utils.isFormSubmittedInWindow(t.reports,'no_contact',e.reported_date,Utils.addDate(n,o.end+1).getTime()),a=Utils.isFormSubmittedInWindow(t.reports,'0',e.reported_date,Utils.addDate(n,1).getTime()),i=Utils.isFormSubmittedInWindow(t.reports,'1',e.reported_date,Utils.addDate(n,1).getTime());return r||a||i},priority:{level:'high',label:'Minor no contact'},actions:[{form:'no_contact',label:'No Contact Minor',modifyContent:function(t){t.is_task=!0,t.task_shows_on_day=3}}],events:[{days:3,start:3,end:21}]}]},function(t,e){const o={name:'client-review-request',icon:'man-risk',title:'task.client-review-request.title',appliesTo:'reports',appliesToType:['no_contact','referral_for_care'],actions:[{form:'client_review',label:'Client review',modifyContent:function(t,e,o){'no_contact'===o.form?t.is_no_contact_ctx=!0:t.is_referral_for_care_ctx=!0}}],events:[{days:0,start:1,end:21}],appliesIf:(t,e)=>'referral_for_care'===e.form||'no_contact'===e.form&&'no'===Utils.getField(e,'n.client_ok'),resolvedIf:(t,e)=>{const o=Utils.getMostRecentReport(t.reports,['client_review','no_contact','referral_for_care']);return!!o&&Utils.isFirstReportNewer(o,e)}};t.exports=o},function(t,e){t.exports=[]},function(t,e,o){var n=o(0);function r(t,e,o,n,r,a){var i;if(t.appliesToType){var c;if('contacts'===t.appliesTo){if(!r.contact)return;c='contact'===r.contact.type?r.contact.contact_type:r.contact.type}else{if(!a)return;c=a.form}if(-1===t.appliesToType.indexOf(c))return}if('scheduled_tasks'===t.appliesTo||!t.appliesIf||t.appliesIf(r,a))if('scheduled_tasks'===t.appliesTo){if(a&&t.appliesIf){if(!a.scheduled_tasks)return;for(i=0;i<a.scheduled_tasks.length;i++)t.appliesIf(r,a,i)&&l(i)}}else l();function s(t,e,o){var n;return(n='function'==typeof t.contactLabel?t.contactLabel(e,o):t.contactLabel)?{name:n}:e.contact}function l(i){var c,l,p,f,u=null;for(c=0;c<t.events.length;c++){if((l=t.events[c]).dueDate)u=l.dueDate(l,r,a,i);else if(a)u=void 0!==i?new Date(e.addDate(new Date(a.scheduled_tasks[i].due),l.days)):new Date(e.addDate(new Date(a.reported_date),l.days));else if(l.dueDate)u=l.dueDate(l,r);else{var _=r.contact&&r.contact.reported_date?new Date(r.contact.reported_date):new Date;u=new Date(e.addDate(_,l.days))}e.isTimely(u,l)&&(f={_id:(a?a._id:r.contact&&r.contact._id)+'~'+(l.id||c)+'~'+t.name,deleted:!(!(r.contact&&r.contact.deleted||a)||!a.deleted),doc:r,contact:s(t,r,a),icon:t.icon,date:u,readyStart:l.start||0,readyEnd:l.end||0,title:t.title,resolved:t.resolvedIf(r,a,l,u,i),actions:t.actions.map(d)},void 0!==i&&(f._id+='-'+i),'function'==typeof(p=t.priority)&&(p=p(r,a)),p&&(f.priority=p.level,f.priorityLabel=p.label),n('task',new o(f)))}}function d(t){var e={source:'task',source_id:!!a?a._id:r.contact&&r.contact._id,contact:r.contact};return t.modifyContent&&t.modifyContent(e,r,a),{type:'report',form:t.form,label:t.label||'Follow up',content:e}}}t.exports=function(t,e,o,a,i){if(t)for(var c,s=0;s<t.length;++s)switch(c=t[s],n(c),c.appliesTo){case'reports':case'scheduled_tasks':for(var l=0;l<e.reports.length;++l)r(c,o,a,i,e,e.reports[l]);break;case'contacts':e.contact&&r(c,o,a,i,e);break;default:throw new Error('Unrecognised task.appliesTo: '+c.appliesTo)}}},function(t,e,o){var n=o(0);function r(t,e,o,n,r,a){var i=!!a;if(r.contact){var c=r.contact.contact_type||r.contact.type,s=i?a.form:c;if(!(t.appliesToType&&t.appliesToType.indexOf(s)<0)&&(!t.appliesIf||t.appliesIf(r,a)))for(var l=i?a:r.contact,d=function(t,e,o){var n;return n='function'==typeof t.idType?t.idType(e,o):'report'===t.idType?o&&o._id:e.contact&&e.contact._id,Array.isArray(n)||(n=[n]),n}(t,r,a),p=!t.passesIf||!!t.passesIf(r,a),f=function(t,e,o,n){if('function'==typeof t.date)return t.date(o,n);if(void 0===t.date||'now'===t.date)return e.now().getTime();if('reported'===t.date)return n?n.reported_date:o.contact.reported_date;throw new Error('Unrecognised value for target.date: '+t.date)}(t,o,r,a),u=t.groupBy&&t.groupBy(r,a),_=0;_<d.length;++_){var m=new e({_id:d[_]+'~'+t.id,contact:r.contact,deleted:!!l.deleted,type:t.id,pass:p,groupBy:u,date:f});t.emitCustom?t.emitCustom(y,m,r,a):y(m)}}function y(t){n('target',t)}}t.exports=function(t,e,o,a,i){for(var c=0;c<t.length;++c){var s=t[c];switch(n(s),s.appliesTo){case'contacts':r(s,a,o,i,e);break;case'reports':for(var l=0;l<e.reports.length;++l){r(s,a,o,i,e,e.reports[l])}break;default:throw new Error('Unrecognised target.appliesTo: '+s.appliesTo)}}}}]); }\n}",
    "targets": {
      "enabled": true,
      "items": []
    }
  },
  "forms": {
    "0": {
      "meta": {
        "label": {
          "en": "No AE Experienced"
        },
        "code": "0"
      },
      "fields": {
        "patient_name": {
          "labels": {
            "tiny": {
              "en": "patient_name"
            },
            "description": {
              "en": "Patient name"
            },
            "short": {
              "en": "Patient name"
            }
          },
          "position": 0,
          "type": "string",
          "required": false
        }
      },
      "use_sentinel": true
    },
    "1": {
      "meta": {
        "label": {
          "en": "Suspected AE Reported"
        },
        "code": "1",
        "icon": "risk"
      },
      "fields": {
        "patient_name": {
          "labels": {
            "tiny": {
              "en": "patient_name"
            },
            "description": {
              "en": "Patient name"
            },
            "short": {
              "en": "Patient name"
            }
          },
          "position": 0,
          "type": "string",
          "required": false
        }
      }
    },
    "N": {
      "meta": {
        "label": {
          "en": "Does NOT recommend MC",
          "icon": "not-recommend"
        },
        "code": "N"
      },
      "fields": {},
      "use_sentinel": true
    },
    "Y": {
      "meta": {
        "label": {
          "en": "Recommend 2wT"
        },
        "code": "Y",
        "icon": "recommend"
      },
      "fields": {},
      "use_sentinel": true
    }
  },
  "transitions": {
    "default_responses": false,
    "update_clinics": true,
    "accept_patient_reports": true,
    "conditional_alerts": false,
    "update_sent_by": false,
    "registration": true,
    "update_notifications": true,
    "update_scheduled_reports": false,
    "multi_report_alerts": false,
    "update_sent_forms": false,
    "generate_patient_id_on_people": true,
    "self_report": true,
    "mark_for_outbound": true,
    "muting": true
  },
  "outbound": {
    "rapidpro-scheduled-msg": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'enroll'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'11504d0e-3b90-4732-84af-c1edf1296b9c'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.r_phone ]",
          "optional": false
        },
        "extra.language": {
          "expr": "doc.fields.r_language_preference",
          "optional": true
        },
        "extra.date": {
          "expr": "doc.reported_date/1000",
          "optional": false
        },
        "extra.name": {
          "expr": "doc.fields.r_patient_name",
          "optional": false
        },
        "extra.group": {
          "expr": "'texting'",
          "optional": false
        },
        "extra.telegram_id": {
          "expr": "doc.fields.r_telegram_id",
          "optional": true
        },
        "extra.alt_phone": {
          "expr": "doc.fields.r_alternative_phone"
        }
      }
    },
    "rapidpro-gateway": {
      "relevant_to": "doc.type === 'data_record' && doc.tasks && doc.tasks[0] && doc.tasks[0].state && doc.tasks[0].state === 'pending'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'62a062ef-c567-48b5-9f45-16fa1f750d20'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.tasks[0].messages[0].to ]",
          "optional": false
        }
      }
    },
    "rapidpro-muting": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'mute'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'4be66392-4ec0-4f5d-bc62-090008acb0e4'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        }
      }
    },
    "rapidpro-unmuting": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'unmute'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'738c9795-748a-42bb-87d9-0a87e79d005b'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        }
      }
    }
  },
  "self_report": [
    {
      "form": "0",
      "messages": []
    },
    {
      "form": "1",
      "messages": []
    }
  ],
  "_version": "3.9.0",
  "contact_summary": "var ContactSummary = {}; !function(e,t){if('object'==typeof exports&&'object'==typeof module)module.exports=t();else if('function'==typeof define&&define.amd)define([],t);else{var n=t();for(var o in n)('object'==typeof exports?exports:e)[o]=n[o]}}(ContactSummary,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(e,'__esModule',{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&'object'==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,'default',{enumerable:!0,value:e}),2&t&&'string'!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,'a',t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p='',n(n.s=0)}([function(e,t,n){var o=n(1),r=n(2);e.exports=r(o,contact,reports)},function(e,t){const n=contact,o=lineage,r=()=>'nurse'===contact.contact_type||!!contact.is_nurse,a=()=>!r(),l='yes'===contact.is_minor;let i;if('person'===contact.type&&!r()){const e=(new Date).getTime()-new Date(contact.reported_date).getTime();i=Math.floor(Math.abs(Math.round(e/864e5)))}const p=[{appliesToType:['person','nurse'],appliesIf:r,label:'contact.profile.nurse',value:'',width:12},{appliesToType:'person',appliesIf:a,label:'person.field.is_minor',value:l?'Yes':'No',width:4},{appliesToType:'person',appliesIf:a,label:'person.field.phone',value:n.phone,width:4,filter:'phone'},{appliesToType:'person',appliesIf:a,label:'person.field.alternate_phone',value:n.alternative_phone,width:4,filter:'phone'},{appliesToType:'person',appliesIf:a,label:'contact.dob',value:n.dob,width:4,filter:'date'},{appliesToType:'person',appliesIf:a,label:'contact.days_since_enrollment',value:i,width:4},{appliesToType:'person',appliesIf:a,label:'contact.enrollment_date',value:contact.reported_date,width:4,filter:'date'},{appliesToType:'person',appliesIf:a,label:'person.field.language_preference',value:n.language_preference,width:8},{appliesToType:['clinic','health_center','district_hospital'],label:'Contact',value:n.contact&&n.contact.name,width:4},{appliesToType:['clinic','health_center','district_hospital'],label:'contact.phone_number',value:n.contact&&n.contact.phone,width:4},{appliesToType:['clinic','health_center','district_hospital'],label:'External ID',value:n.external_id,width:4},{appliesToType:['clinic','health_center','district_hospital'],appliesIf:function(){return n.parent&&o[0]},label:'contact.parent',value:o,filter:'lineage'}];l&&p.push({appliesToType:'person',appliesIf:a,label:'person.field.phone_owner',value:n.phone_owner,width:4}),p.push({appliesToType:'person',label:'contact.parent',value:o,filter:'lineage',width:12}),e.exports={fields:p}},function(e,t){function n(e){return Array.isArray(e)?e:[e]}function o(e,t){switch(typeof e){case'undefined':return!0;case'function':return e(t);default:return e}}function r(e,t,n){if(o(e.appliesIf,n)){var r='function'==typeof e.fields?e.fields(n):e.fields.filter((function(e){return o(e.appliesIf,n)})).map((function(e){var t={};return a(e,t,'label'),a(e,t,'value'),a(e,t,'translate'),a(e,t,'filter'),a(e,t,'width'),a(e,t,'icon'),e.context&&(t.context={},a(e.context,t.context,'count'),a(e.context,t.context,'total')),t}));return e.modifyContext&&e.modifyContext(t,n),{label:e.label,fields:r}}function a(e,t,o){switch(typeof e[o]){case'undefined':return;case'function':t[o]=e[o](n);break;default:t[o]=e[o]}}}e.exports=function(e,t,o){var a=e.fields||[],l=e.context||{},i=e.cards||[],p=t&&(t.contact_type||t.type),c={cards:[],fields:a.filter((function(e){var t=n(e.appliesToType),o=t.filter((function(e){return e&&'!'===e.charAt(0)}));if((t.includes(p)||o.length>0&&!o.includes('!'+p))&&(!e.appliesIf||e.appliesIf()))return delete e.appliesToType,delete e.appliesIf,!0}))};return i.forEach((function(e){var t,a,i,s,f=n(e.appliesToType);if(f.includes('report')&&f.length>1)throw new Error('You cannot set appliesToType to an array which includes the type \\'report\\' and another type.');if(f.includes('report'))for(t=0;t<o.length;++t)a=o[t],!(s=a)||s.errors&&s.errors.length||(i=r(e,l,a))&&c.cards.push(i);else{if(!f.includes(p))return;(i=r(e,l))&&c.cards.push(i)}})),c.context=l,c}}])})); return ContactSummary;",
  "place_hierarchy_types": [
    "district_hospital",
    "health_center"
  ],
  "changes_controller": {
    "reiterate_changes": true,
    "changes_limit": 100,
    "debounce_interval": 200
  },
  "sms": {
    "outgoing_service": "medic-gateway"
  },
  "contact_types": [
    {
      "id": "district_hospital",
      "name_key": "contact.type.district_hospital",
      "group_key": "contact.type.district_hospital.plural",
      "create_key": "contact.type.district_hospital.new",
      "edit_key": "contact.type.place.edit",
      "icon": "medic-district-hospital",
      "create_form": "form:contact:district_hospital:create",
      "edit_form": "form:contact:district_hospital:edit"
    },
    {
      "id": "health_center",
      "name_key": "contact.type.health_center",
      "group_key": "contact.type.health_center.plural",
      "create_key": "contact.type.health_center.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "district_hospital"
      ],
      "icon": "medic-health-center",
      "create_form": "form:contact:health_center:create",
      "edit_form": "form:contact:health_center:edit"
    },
    {
      "id": "clinic",
      "name_key": "contact.type.clinic",
      "group_key": "contact.type.clinic.plural",
      "create_key": "contact.type.clinic.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "health_center"
      ],
      "icon": "medic-clinic",
      "create_form": "form:contact:clinic:create",
      "edit_form": "form:contact:clinic:edit",
      "count_visits": true
    },
    {
      "id": "person",
      "name_key": "contact.type.person",
      "group_key": "contact.type.person.plural",
      "create_key": "contact.type.person.new",
      "edit_key": "contact.type.person.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "create_form": "form:contact:person:create",
      "edit_form": "form:contact:person:edit",
      "person": true
    },
    {
      "id": "nurse",
      "name_key": "contact.type.nurse",
      "group_key": "contact.type.nurse.plural",
      "create_key": "contact.type.nurse.new",
      "edit_key": "contact.type.nurse.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "create_form": "form:contact:nurse:create",
      "edit_form": "form:contact:nurse:create",
      "person": true
    }
  ],
  "muting": {
    "mute_forms": [
      "mute"
    ],
    "unmute_forms": [
      "unmute"
    ],
    "validations": {
      "join_responses": true,
      "list": []
    }
  },
  "purge": {
    "text_expression": "at 12 am on Monday",
    "run_every_days": 2,
    "cron": "0 0 * * MON",
    "fn": "function(userCtx, contact, reports, messages) {\n        const old = Date.now() - (1000 * 60 * 60 * 24 * 90);\n        const oldMessages = Date.now() - (1000 * 60 * 60 * 24 * 90);\n      \n        const reportsToPurge = reports\n                                 .filter(r => r.reported_date < old)\n                                 .map(r => r._id);\n        const messagesToPurge = messages\n                                 .filter(m => m.reported_date < oldMessages)\n                                 .map(m => m._id);\n      \n        return [...reportsToPurge, ...messagesToPurge];\n      }"
  }
}