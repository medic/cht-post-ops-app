{
  "locales": [
    {
      "code": "en",
      "name": "English"
    },
    {
      "code": "es",
      "name": "Español (Spanish)"
    },
    {
      "code": "fr",
      "name": "Français (French)"
    },
    {
      "code": "ne",
      "name": "नेपाली (Nepali)"
    },
    {
      "code": "sw",
      "name": "Kiswahili (Swahili)"
    }
  ],
  "locale": "en",
  "locale_outgoing": "en",
  "muvuku_webapp_url": "/medic-reporter/_design/medic-reporter/_rewrite/?_embed_mode=2&_locale=en#/generic-anc.json",
  "date_format": "ddd, MMM Do, YYYY",
  "reported_date_format": "ddd, MMM Do, YYYY [at] h:mm A",
  "forms_only_mode": false,
  "default_responses": {
    "start_date": "1970-01-01"
  },
  "district_admins_access_unallocated_messages": true,
  "public_access": false,
  "default_country_code": "263",
  "gateway_number": "+263782709352",
  "kujua-reporting": [
    {
      "code": "",
      "reporting_freq": "weekly"
    }
  ],
  "anc_forms": {},
  "schedule_morning_hours": 6,
  "schedule_morning_minutes": 0,
  "schedule_evening_hours": 20,
  "schedule_evening_minutes": 0,
  "synthetic_date": "",
  "contact_display_short": "clinic.name",
  "permissions": {
    "can_export_messages": [
      "national_admin",
      "district_admin",
      "analytics"
    ],
    "can_export_forms": [
      "national_admin",
      "district_admin",
      "analytics"
    ],
    "can_export_contacts": [
      "national_admin",
      "district_admin"
    ],
    "can_export_audit": [
      "national_admin",
      "district_admin"
    ],
    "can_export_feedback": [
      "national_admin"
    ],
    "can_export_server_logs": [
      "national_admin"
    ],
    "can_access_directly": [
      "national_admin"
    ],
    "can_view_analytics": [
      "national_admin",
      "district_admin",
      "analytics",
      "regional_admin"
    ],
    "can_view_data_records": [
      "national_admin",
      "district_admin",
      "read_only",
      "analytics",
      "gateway",
      "regional_admin"
    ],
    "can_view_unallocated_data_records": [
      "national_admin",
      "district_admin",
      "read_only",
      "gateway"
    ],
    "can_view_users": [
      "national_admin",
      "read_only"
    ],
    "can_edit": [
      "national_admin",
      "district_admin",
      "gateway",
      "regional_admin"
    ],
    "can_update_messages": [
      "national_admin",
      "district_admin",
      "gateway"
    ],
    "can_update_users": [
      "national_admin"
    ],
    "can_update_people": [
      "national_admin"
    ],
    "can_update_places": [
      "national_admin"
    ],
    "can_create_records": [
      "national_admin",
      "district_admin",
      "regional_admin",
      "gateway"
    ],
    "can_access_gateway_api": [
      "gateway"
    ],
    "can_create_users": [
      "national_admin"
    ],
    "can_create_people": [
      "national_admin"
    ],
    "can_create_places": [
      "national_admin"
    ],
    "can_view_tasks": [
      "national_admin",
      "district_admin",
      "offline_limited",
      "regional_admin"
    ],
    "can_view_tasks_tab": [
      "national_admin",
      "district_admin",
      "offline_limited",
      "regional_admin"
    ],
    "can_configure": [
      "national_admin"
    ],
    "can_view_messages": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited",
      "regional_admin"
    ],
    "can_view_messages_tab": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited",
      "regional_admin"
    ],
    "can_view_reports": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited",
      "regional_admin"
    ],
    "can_view_reports_tab": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited",
      "regional_admin"
    ],
    "can_view_analytics_tab": [
      "national_admin",
      "district_admin",
      "regional_admin"
    ],
    "can_view_contacts": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited",
      "regional_admin"
    ],
    "can_view_contacts_tab": [
      "national_admin",
      "district_admin",
      "read_only",
      "offline_limited",
      "regional_admin"
    ],
    "can_edit_profile": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_reports": [
      "national_admin",
      "district_admin"
    ],
    "can_bulk_delete_reports": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_contacts": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_messages": [
      "national_admin",
      "district_admin"
    ],
    "can_delete_users": [
      "national_admin"
    ],
    "can_view_message_action": [
      "national_admin",
      "district_admin",
      "regional_admin"
    ],
    "can_view_call_action": [
      "national_admin",
      "district_admin",
      "regional_admin"
    ],
    "can_log_out_on_android": [
      "national_admin",
      "district_admin",
      "offline_limited",
      "regional_admin"
    ]
  },
  "roles": {
    "data_entry": {
      "name": "usertype.data-entry"
    },
    "analytics": {
      "name": "usertype.analytics"
    },
    "gateway": {
      "name": "usertype.gateway"
    },
    "national_admin": {
      "name": "usertype.national-manager"
    },
    "district_admin": {
      "name": "usertype.district-manager",
      "offline": true
    },
    "regional_admin": {
      "name": "usertype.regional-manager",
      "offline": true
    },
    "read_only": {
      "name": "usertype.read-only"
    },
    "offline_limited": {
      "name": "usertype.offline-limited",
      "offline": true
    }
  },
  "setup_complete": true,
  "care_coordinator": "chw",
  "anc_registration_lmp": true,
  "statistics_submission": "none",
  "outgoing_phone_replace": {
    "match": "",
    "replace": ""
  },
  "outgoing_phone_filters": [
    {
      "match": "",
      "replace": ""
    }
  ],
  "id_format": "1111",
  "statistics_submission_number": "",
  "replication_depth": [
    {
      "role": "",
      "depth": 2
    }
  ],
  "replications": [
    {
      "fromSuffix": "user-[^\\-]+-meta",
      "toSuffix": "users-meta",
      "text_expression": "",
      "cron": "0 2 * * *"
    }
  ],
  "alerts": [],
  "reminders": [],
  "registrations": [
    {
      "form": "0",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "1",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "Y",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "N",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    }
  ],
  "patient_reports": [
    {
      "form": "followup",
      "validations": {},
      "messages": [
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.fields.language_preference == 'english'",
          "translation_key": "eng.messages.2wt.notification",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.fields.language_preference == 'shona'",
          "translation_key": "shona.messages.2wt.notification",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.fields.language_preference == 'ndebele'",
          "translation_key": "ndebele.messages.2wt.notification",
          "recipient": "phone"
        }
      ]
    },
    {
      "form": "1",
      "messages": [
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.patient.language_preference == 'english'",
          "translation_key": "eng.messages.2wt.potential.ae.response",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.patient.language_preference == 'shona'",
          "translation_key": "shona.messages.2wt.potential.ae.response",
          "recipient": "phone"
        },
        {
          "event_type": "report_accepted",
          "bool_expr": "doc.patient.language_preference == 'ndebele'",
          "translation_key": "ndebele.messages.2wt.potential.ae.response",
          "recipient": "phone"
        }
      ]
    }
  ],
  "schedules": [],
  "tasks": {
    "rules": "define Target { _id: null, contact: null, deleted: null, type: null, pass: null, date: null, groupBy: null }\ndefine Contact { contact: null, reports: null, tasks: null }\ndefine Task { _id: null, deleted: null, doc: null, contact: null, icon: null, date: null, readyStart: null, readyEnd: null, title: null, fields: null, resolved: null, priority: null, priorityLabel: null, reports: null, actions: null }\nrule GenerateEvents {\n  when { c: Contact } then { !function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(t,'__esModule',{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&'object'==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,'default',{enumerable:!0,value:t}),2&e&&'string'!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,'a',e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p='',n(n.s=2)}([function(t,e){t.exports={VMMC_NO_CONTACT_TASKS_LIFESPAN:45}},function(t,e){t.exports=function(t){var e={};!function t(e,n){var o=Object.keys(e);for(var r in o){var a=o[r];switch(typeof e[a]){case'object':t(e[a],n);break;case'function':e[a]=e[a].bind(n)}}}(t,e),e.definition=function t(e){var n=Object.assign({},e),o=Object.keys(n);for(var r in o){var a=o[r];if(Array.isArray(n[a])){n[a]=n[a].slice(0);for(var i=0;i<n[a].length;++i)'object'==typeof n[a][i]&&(n[a][i]=t(n[a][i]))}else'object'==typeof n[a]&&(n[a]=t(n[a]))}return n}(t)}},function(t,e,n){var o=n(3),r=n(7),a=n(8);n(10)(r,c,Utils,Target,emit),a(o,c,Utils,Task,emit),emit('_complete',{_id:!0})},function(t,e,n){const o=n(4),r=n(5),{noContactTask:a,noContactMinorTask:i}=n(6);t.exports=[o,r,a,i]},function(t,e){const n={name:'client-review-request',icon:'man-risk',title:'task.client-review-request.title',appliesTo:'reports',appliesToType:['no_contact','referral_for_care'],actions:[{form:'client_review',label:'Client review',modifyContent:function(t,e,n){'no_contact'===n.form?t.is_no_contact_ctx=!0:t.is_referral_for_care_ctx=!0}}],events:[{days:0,start:1,end:21}],appliesIf:(t,e)=>'referral_for_care'===e.form||'no_contact'===e.form&&'yes_not_ok'===Utils.getField(e,'n.client_ok'),resolvedIf:(t,e)=>{const n=Utils.getMostRecentReport(t.reports,['client_review','no_contact','referral_for_care']);return!!n&&Utils.isFirstReportNewer(n,e)}};t.exports=n},function(t,e,n){const{VMMC_NO_CONTACT_TASKS_LIFESPAN:o}=n(0),r={name:'in-person-tracing',icon:'follow-up',title:'task.in-person-tracing.title',appliesTo:'reports',appliesToType:['client_review','no_contact'],contactLabel:function(t){return t.contact.name},appliesIf:(t,e)=>{let n;return n='client_review'===e.form?'no'===Utils.getField(e,'review.tracing_method'):'no'===Utils.getField(e,'n.client_ok'),n},resolvedIf:(t,e,n,o)=>{const r=Utils.isFormSubmittedInWindow(t.reports,'tracing',e.reported_date,Utils.addDate(o,n.end+1).getTime()),a=Utils.isFormSubmittedInWindow(t.reports,'client_review',e.reported_date+1e3,Utils.addDate(o,n.end+1).getTime()),i=Utils.isFormSubmittedInWindow(t.reports,'client_visit',e.reported_date,Utils.addDate(o,n.end+1).getTime()),c=Utils.isFormSubmittedInWindow(t.reports,'0',e.reported_date,Utils.addDate(o,1).getTime()),s=Utils.isFormSubmittedInWindow(t.reports,'1',e.reported_date,Utils.addDate(o,1).getTime());return r||a||i||c||s},actions:[{form:'tracing',label:'In-Person Tracing'}],events:[{days:0,start:1,end:o}]};t.exports=r},function(t,e,n){const{VMMC_NO_CONTACT_TASKS_LIFESPAN:o}=n(0);console.log(o);const r=(t,e,n,o)=>{const r=Utils.addDate(o,1).getTime();if(t.contact.last_seen){const e=new Date(t.contact.last_seen).getTime();if(Utils.isTimely(e,r))return!0}const a=Utils.isFormSubmittedInWindow(t.reports,'no_contact',e.reported_date,Utils.addDate(o,n.end+1).getTime()),i=Utils.isFormSubmittedInWindow(t.reports,'0',e.reported_date,Utils.addDate(o,1).getTime()),c=Utils.isFormSubmittedInWindow(t.reports,'1',e.reported_date,Utils.addDate(o,1).getTime());return a||i||c},a={name:'no-contact',icon:'off',title:'task.no-contact.title',appliesTo:'reports',appliesToType:['enroll','client_review'],contactLabel:function(t){return t.contact.name+' ('+t.contact.enrollment_location+')'},appliesIf:(t,e)=>'enroll'===e.form||'no'===Utils.getField(e,'review.tracing_method'),resolvedIf:r,actions:[{form:'no_contact',label:'No Contact',modifyContent:function(t){t.is_task=!0,t.task_shows_on_day=8}}],events:[{days:8,start:0,end:o}]},i={name:'no-contact-minor',icon:'minor-danger',title:'task.no-contact.title',appliesTo:'reports',appliesToType:['enroll'],contactLabel:function(t){return t.contact.name+' ('+t.contact.enrollment_location+')'},appliesIf:t=>'yes'===t.contact.is_minor,resolvedIf:r,priority:{level:'high',label:'Minor no contact'},actions:[{form:'no_contact',label:'No Contact Minor',modifyContent:function(t){t.is_task=!0,t.task_shows_on_day=3}}],events:[{days:3,start:3,end:o}]};t.exports={noContactTask:a,noContactMinorTask:i}},function(t,e){t.exports=[]},function(t,e,n){var o=n(1),r=n(9);function a(t,e,n,o,r,a){var i;if(t.appliesToType){var c;if('contacts'===t.appliesTo){if(!r.contact)return;c='contact'===r.contact.type?r.contact.contact_type:r.contact.type}else{if(!a)return;c=a.form}if(-1===t.appliesToType.indexOf(c))return}if('scheduled_tasks'===t.appliesTo||!t.appliesIf||t.appliesIf(r,a))if('scheduled_tasks'===t.appliesTo){if(a&&t.appliesIf){if(!a.scheduled_tasks)return;for(i=0;i<a.scheduled_tasks.length;i++)t.appliesIf(r,a,i)&&d(i)}}else d();function s(t,e,n){var o;return(o='function'==typeof t.contactLabel?t.contactLabel(e,n):t.contactLabel)?{name:o}:e.contact}function d(i){var c,d,p,f,u=null;for(c=0;c<t.events.length;c++){if((d=t.events[c]).dueDate)u=d.dueDate(d,r,a,i);else if(a)u=void 0!==i?new Date(e.addDate(new Date(a.scheduled_tasks[i].due),d.days)):new Date(e.addDate(new Date(a.reported_date),d.days));else if(d.dueDate)u=d.dueDate(d,r);else{var _=r.contact&&r.contact.reported_date?new Date(r.contact.reported_date):new Date;u=new Date(e.addDate(_,d.days))}e.isTimely(u,d)&&(f={_id:(a?a._id:r.contact&&r.contact._id)+'~'+(d.id||c)+'~'+t.name,deleted:!(!(r.contact&&r.contact.deleted||a)||!a.deleted),doc:r,contact:s(t,r,a),icon:t.icon,date:u,readyStart:d.start||0,readyEnd:d.end||0,title:t.title,resolved:t.resolvedIf(r,a,d,u,i),actions:l(t.actions,d)},void 0!==i&&(f._id+='-'+i),'function'==typeof(p=t.priority)&&(p=p(r,a)),p&&(f.priority=p.level,f.priorityLabel=p.label),o('task',new n(f)))}}function l(e,n){return t.actions.map((function(t){return function(t,e){var n={source:'task',source_id:a?a._id:r.contact&&r.contact._id,contact:r.contact};t.modifyContent&&t.modifyContent(n,r,a,e);return{type:t.type||'report',form:t.form,label:t.label||'Follow up',content:n}}(t,n)}))}}t.exports=function(t,e,n,i,c){if(t)for(var s,d,l=0;l<t.length;++l)switch('function'!=typeof(s=Object.assign({},t[l],r)).resolvedIf&&(s.resolvedIf=function(t,e,o,r){return s.defaultResolvedIf(t,e,o,r,n)}),o(s),s.appliesTo){case'reports':case'scheduled_tasks':for(var p=0;p<e.reports.length;++p)d=e.reports[p],a(s,n,i,c,e,d);break;case'contacts':e.contact&&a(s,n,i,c,e);break;default:throw new Error('Unrecognised task.appliesTo: '+s.appliesTo)}}},function(t,e){t.exports={defaultResolvedIf:function(t,e,n,o,r){var a,i;r||(r=Utils);var c=function(t){var e;if(!t||!t.actions)return;return(e=t.actions.find((function(t){return!t.type||'report'===t.type})))&&e.form}(this.definition);if(!c)throw new Error('Could not find the default resolving form!');return a=0,a=e?Math.max(r.addDate(o,-n.start).getTime(),e.reported_date+1):r.addDate(o,-n.start).getTime(),i=r.addDate(o,n.end+1).getTime(),r.isFormSubmittedInWindow(t.reports,c,a,i)}}},function(t,e,n){var o=n(1);function r(t,e,n,o,r,a){var i=!!a;if(r.contact){var c='contact'===r.contact.type?r.contact.contact_type:r.contact.type,s=i?a.form:c;if(!(t.appliesToType&&t.appliesToType.indexOf(s)<0)&&(!t.appliesIf||t.appliesIf(r,a)))for(var d=i?a:r.contact,l=function(t,e,n){var o;return o='function'==typeof t.idType?t.idType(e,n):'report'===t.idType?n&&n._id:e.contact&&e.contact._id,Array.isArray(o)||(o=[o]),o}(t,r,a),p=!t.passesIf||!!t.passesIf(r,a),f=function(t,e,n,o){if('function'==typeof t.date)return t.date(n,o)||e.now().getTime();if(void 0===t.date||null===t.date||'now'===t.date)return e.now().getTime();if('reported'===t.date)return o?o.reported_date:n.contact.reported_date;throw new Error('Unrecognised value for target.date: '+t.date)}(t,n,r,a),u=t.groupBy&&t.groupBy(r,a),_=0;_<l.length;++_){var m=new e({_id:l[_]+'~'+t.id,contact:r.contact,deleted:!!d.deleted,type:t.id,pass:p,groupBy:u,date:f});t.emitCustom?t.emitCustom(y,m,r,a):y(m)}}function y(t){o('target',t)}}t.exports=function(t,e,n,a,i){for(var c=0;c<t.length;++c){var s=t[c];switch(o(s),s.appliesTo){case'contacts':r(s,a,n,i,e);break;case'reports':for(var d=0;d<e.reports.length;++d){r(s,a,n,i,e,e.reports[d])}break;default:throw new Error('Unrecognised target.appliesTo: '+s.appliesTo)}}}}]); }\n}",
    "targets": {
      "enabled": true,
      "items": []
    }
  },
  "forms": {
    "0": {
      "meta": {
        "label": {
          "en": "No AE Experienced"
        },
        "code": "0"
      },
      "fields": {
        "patient_name": {
          "labels": {
            "tiny": {
              "en": "patient_name"
            },
            "description": {
              "en": "Patient name"
            },
            "short": {
              "en": "Patient name"
            }
          },
          "position": 0,
          "type": "string",
          "required": false
        }
      },
      "use_sentinel": true
    },
    "1": {
      "meta": {
        "label": {
          "en": "Suspected AE Reported"
        },
        "code": "1",
        "icon": "risk"
      },
      "fields": {
        "patient_name": {
          "labels": {
            "tiny": {
              "en": "patient_name"
            },
            "description": {
              "en": "Patient name"
            },
            "short": {
              "en": "Patient name"
            }
          },
          "position": 0,
          "type": "string",
          "required": false
        }
      }
    },
    "N": {
      "meta": {
        "label": {
          "en": "Does NOT recommend MC",
          "icon": "not-recommend"
        },
        "code": "N"
      },
      "fields": {},
      "use_sentinel": true
    },
    "Y": {
      "meta": {
        "label": {
          "en": "Recommend 2wT"
        },
        "code": "Y",
        "icon": "recommend"
      },
      "fields": {},
      "use_sentinel": true
    }
  },
  "transitions": {
    "default_responses": false,
    "update_clinics": true,
    "accept_patient_reports": true,
    "conditional_alerts": false,
    "update_sent_by": false,
    "registration": true,
    "update_notifications": true,
    "update_scheduled_reports": false,
    "multi_report_alerts": false,
    "update_sent_forms": false,
    "generate_patient_id_on_people": true,
    "self_report": true,
    "mark_for_outbound": true,
    "muting": true
  },
  "outbound": {
    "rapidpro-scheduled-msg": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'enroll'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'11504d0e-3b90-4732-84af-c1edf1296b9c'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.r_phone ]",
          "optional": false
        },
        "extra.language": {
          "expr": "doc.fields.r_language_preference",
          "optional": true
        },
        "extra.date": {
          "expr": "doc.reported_date/1000",
          "optional": false
        },
        "extra.name": {
          "expr": "doc.fields.patient_name",
          "optional": false
        },
        "extra.group": {
          "expr": "'texting'",
          "optional": false
        },
        "extra.telegram_id": {
          "expr": "doc.fields.r_telegram_id",
          "optional": true
        },
        "extra.alt_phone": {
          "expr": "doc.fields.r_alternative_phone",
          "optional": true
        },
        "extra.medic_id": {
          "expr": "doc.fields.patient_uuid",
          "optional": false
        },
        "extra.use_whatsapp": {
          "expr": "doc.fields.r_use_whatsapp",
          "optional": true
        },
        "extra.whatsapp_number": {
          "expr": "doc.fields.r_same_sms_whatsapp_number ? doc.fields.r_phone : doc.fields.r_whatsapp_number",
          "optional": true
        }
      }
    },
    "rapidpro-update-contact": {
      "relevant_to": "doc.type === 'person' && doc.edited === 'true'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "aurum.rapidpro.dev"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'2a5fd2d8-478e-4159-8fca-48998bf45724'"
        },
        "contacts": {
          "expr": "[ doc.rapidpro_uuid ]",
          "optional": false
        },
        "extra.language": {
          "expr": "doc.language_preference",
          "optional": true
        },
        "extra.date": {
          "expr": "doc.reported_date/1000",
          "optional": false
        },
        "extra.name": {
          "expr": "doc.name",
          "optional": false
        },
        "extra.group": {
          "expr": "'texting'",
          "optional": false
        },
        "extra.telegram_id": {
          "expr": "doc.telegram_id ? doc.telegram_id : ''",
          "optional": true
        },
        "extra.phone": {
          "expr": "doc.phone",
          "optional": true
        },
        "extra.alt_phone": {
          "expr": "doc.alternative_phone",
          "optional": true
        },
        "extra.medic_id": {
          "expr": "doc._id",
          "optional": false
        }
      }
    },
    "rapidpro-gateway": {
      "relevant_to": "doc.type === 'data_record' && doc.tasks && doc.tasks[0] && doc.tasks[0].state && doc.tasks[0].state === 'pending'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'62a062ef-c567-48b5-9f45-16fa1f750d20'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.tasks[0].messages[0].to ]",
          "optional": false
        }
      }
    },
    "rapidpro-muting": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'mute'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'4be66392-4ec0-4f5d-bc62-090008acb0e4'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        }
      }
    },
    "rapidpro-unmuting": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'unmute'",
      "destination": {
        "base_url": "https://rapidpro.app.medicmobile.org",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "rapidpro.app"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'738c9795-748a-42bb-87d9-0a87e79d005b'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        }
      }
    }
  },
  "self_report": [
    {
      "form": "0",
      "messages": []
    },
    {
      "form": "1",
      "messages": []
    }
  ],
  "_version": "3.9.0",
  "contact_summary": "var ContactSummary = {}; !function(e,t){if('object'==typeof exports&&'object'==typeof module)module.exports=t();else if('function'==typeof define&&define.amd)define([],t);else{var n=t();for(var o in n)('object'==typeof exports?exports:e)[o]=n[o]}}(ContactSummary,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(e,'__esModule',{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&'object'==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,'default',{enumerable:!0,value:e}),2&t&&'string'!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,'a',t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p='',n(n.s=0)}([function(e,t,n){var o=n(1),r=n(4);e.exports=r(o,contact,reports)},function(e,t,n){const o=n(2),r=contact,a=lineage;function l(){return'person'===r.type&&(!i()||'patient'===r.role)}const i=()=>'nurse'===contact.contact_type||!!contact.is_nurse,p=()=>!i(),s='yes'===contact.is_minor;let c;if(l){const e=(new Date).getTime()-new Date(contact.reported_date).getTime();c=Math.floor(Math.abs(Math.round(e/864e5)))}const f=[{appliesToType:['person','nurse'],appliesIf:i,label:'contact.profile.nurse',value:'',width:12},{appliesToType:'person',appliesIf:p,label:'person.field.is_minor',value:s?'Yes':'No',width:4},{appliesToType:'person',appliesIf:p,label:'person.field.phone',value:r.phone,width:4,filter:'phone'},{appliesToType:'person',appliesIf:p,label:'person.field.alternate_phone',value:r.alternative_phone,width:4,filter:'phone'},{appliesToType:'person',appliesIf:p,label:'contact.dob',value:r.dob,width:4,filter:'date'},{appliesToType:'person',appliesIf:p,label:'contact.days_since_enrollment',value:c,width:4},{appliesToType:'person',appliesIf:p,label:'contact.enrollment_date',value:contact.reported_date,width:4,filter:'date'},{appliesToType:'person',appliesIf:p,label:'person.field.language_preference',value:r.language_preference,width:4},{appliesToType:'person',appliesIf:p,label:'person.field.preferred_channel',value:'Yes'===r.use_whatsapp?'SMS and WhatsApp':'SMS Only',width:4},{appliesToType:'person',appliesIf:p,label:'contact.last_seen',value:contact.last_seen,width:4,filter:'date'},{appliesToType:['clinic','health_center','district_hospital'],label:'Contact',value:r.contact&&r.contact.name,width:4},{appliesToType:['clinic','health_center','district_hospital'],label:'contact.phone_number',value:r.contact&&r.contact.phone,width:4},{appliesToType:['clinic','health_center','district_hospital'],label:'External ID',value:r.external_id,width:4},{appliesToType:['clinic','health_center','district_hospital'],appliesIf:function(){return r.parent&&a[0]},label:'contact.parent',value:a,filter:'lineage'}];s&&f.push({appliesToType:'person',appliesIf:p,label:'person.field.phone_owner',value:r.phone_owner,width:4}),f.push({appliesToType:['person','nurse'],label:'contact.parent',value:a,filter:'lineage',width:12});const u=[],d=reports.filter(e=>'0'===e.form||'1'===e.form);if(l()){const e=o(contact,d,c);u.push(e)}e.exports={fields:f,cards:u}},function(e,t,n){const{getAESuspectedReports:o,lastSeenFromLogs:r,getAEReportDays:a,dateDiffInDays:l}=n(3);function i(e,t,n){const i=[],p=o(t);e.last_seen&&p.push({type:'data_record',reported_date:new Date(e.last_seen).getTime()});const[s,c]=p.length?function(e,t){let n=!1,o=!1;if(e.last_seen_log){const t=r(e);n=t.filter(e=>e>=0&&e<=4).length>0,o=t.filter(e=>e>=5&&e<=8).length>0}else if(t.length){const r=a(e,t);n=r.filter(e=>e>=0&&e<=4).length>0,o=r.filter(e=>e>=5&&e<=8).length>0}else if(e.last_seen){const t=l(new Date(e.reported_date).getTime(),new Date(e.last_seen).getTime());n=t>=0&&t<=4,o=t>=5&&t<=8}return console.log('SMS Status',n,o),[n,o]}(e,p):[!1,!1];return i.push({appliesToType:'person',label:'Day 2 SMS',value:s?'Received':'Not received',width:6,icon:s?'on':'off'}),n>=5&&i.push({appliesToType:'person',label:'Day 7 SMS',value:c?'Received':'Not received',width:6,icon:c?'on':'risk'}),i}e.exports=function(e,t,n){return{label:'SMS Status',appliesToType:['person'],appliesIf:!0,fields:i(e,t,n)}}},function(e,t){function n(e,t){const n=Math.ceil((e-t)/36e5),o=n/24;return n<24?1:Math.ceil(o)}e.exports={getAESuspectedReports:function(e){return e.filter(e=>['1','0'].includes(e.form))},getAEReportedReports:function(e){return e.filter(e=>'potential_ae'===e.form)},getAEReportDays:function(e,t){const o=[];return t.forEach(t=>{const r=n(new Date(t.reported_date).getTime(),new Date(e.reported_date).getTime());o.push(r)}),o},lastSeenFromLogs:function(e){const t=e.last_seen_log;try{const o=JSON.parse(t).split(';').map(e=>JSON.parse(e)),r=o.map(t=>n(new Date(t.time).getTime(),new Date(e.reported_date).getTime()));return console.log('Days active',r,o),[...new Set(r)]}catch(e){return console.log('Error in last seen log',e),null}},dateDiffInDays:n}},function(e,t){function n(e){return e?Array.isArray(e)?e:[e]:[]}function o(e,t){switch(typeof e){case'undefined':return!0;case'function':return e(t);default:return e}}function r(e,t,n){if(o(e.appliesIf,n)){var r='function'==typeof e.fields?e.fields(n):e.fields.filter((function(e){return o(e.appliesIf,n)})).map((function(e){var t={};return a(e,t,'label'),a(e,t,'value'),a(e,t,'translate'),a(e,t,'filter'),a(e,t,'width'),a(e,t,'icon'),e.context&&(t.context={},a(e.context,t.context,'count'),a(e.context,t.context,'total')),t}));return e.modifyContext&&e.modifyContext(t,n),{label:e.label,fields:r}}function a(e,t,o){switch(typeof e[o]){case'undefined':return;case'function':t[o]=e[o](n);break;default:t[o]=e[o]}}}e.exports=function(e,t,o){var a=e.fields||[],l=e.context||{},i=e.cards||[],p=t&&('contact'===t.type?t.contact_type:t.type),s={cards:[],fields:a.filter((function(e){var t=n(e.appliesToType),o=t.filter((function(e){return e&&'!'===e.charAt(0)}));if((0===t.length||t.includes(p)||o.length>0&&!o.includes('!'+p))&&(!e.appliesIf||e.appliesIf()))return delete e.appliesToType,delete e.appliesIf,!0}))};return i.forEach((function(e){var t,a,i,c,f=n(e.appliesToType);if(f.includes('report')&&f.length>1)throw new Error('You cannot set appliesToType to an array which includes the type \\'report\\' and another type.');if(f.includes('report'))for(t=0;t<o.length;++t)a=o[t],!(c=a)||c.errors&&c.errors.length||(i=r(e,l,a))&&s.cards.push(i);else{if(!f.includes(p)&&f.length>0)return;(i=r(e,l))&&s.cards.push(i)}})),s.context=l,s}}])})); return ContactSummary;",
  "place_hierarchy_types": [
    "district_hospital",
    "health_center"
  ],
  "changes_controller": {
    "reiterate_changes": true,
    "changes_limit": 100,
    "debounce_interval": 200
  },
  "sms": {
    "outgoing_service": "medic-gateway"
  },
  "contact_types": [
    {
      "id": "district_hospital",
      "name_key": "contact.type.district_hospital",
      "group_key": "contact.type.district_hospital.plural",
      "create_key": "contact.type.district_hospital.new",
      "edit_key": "contact.type.place.edit",
      "icon": "medic-district-hospital",
      "create_form": "form:contact:district_hospital:create",
      "edit_form": "form:contact:district_hospital:edit"
    },
    {
      "id": "health_center",
      "name_key": "contact.type.health_center",
      "group_key": "contact.type.health_center.plural",
      "create_key": "contact.type.health_center.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "district_hospital"
      ],
      "icon": "medic-health-center",
      "create_form": "form:contact:health_center:create",
      "edit_form": "form:contact:health_center:edit"
    },
    {
      "id": "clinic",
      "name_key": "contact.type.clinic",
      "group_key": "contact.type.clinic.plural",
      "create_key": "contact.type.clinic.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "health_center"
      ],
      "icon": "medic-clinic",
      "create_form": "form:contact:clinic:create",
      "edit_form": "form:contact:clinic:edit",
      "count_visits": true
    },
    {
      "id": "person",
      "name_key": "contact.type.person",
      "group_key": "contact.type.person.plural",
      "create_key": "contact.type.person.new",
      "edit_key": "contact.type.person.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "create_form": "form:contact:person:create",
      "edit_form": "form:contact:person:edit",
      "person": true
    },
    {
      "id": "nurse",
      "name_key": "contact.type.nurse",
      "group_key": "contact.type.nurse.plural",
      "create_key": "contact.type.nurse.new",
      "edit_key": "contact.type.nurse.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "create_form": "form:contact:nurse:create",
      "edit_form": "form:contact:nurse:create",
      "person": true
    }
  ],
  "muting": {
    "mute_forms": [
      "mute"
    ],
    "unmute_forms": [
      "unmute"
    ],
    "validations": {
      "join_responses": true,
      "list": []
    }
  },
  "purge": {
    "text_expression": "at 12 am on Monday",
    "run_every_days": 2,
    "cron": "0 0 * * MON",
    "fn": "function (userCtx, contact, reports, messages) {\n    const old = Date.now() - (1000 * 60 * 60 * 24 * 45);\n    const oldMessages = Date.now() - (1000 * 60 * 60 * 24 * 45);\n\n    const reportsToPurge = reports\n      .filter(r => r.reported_date < old)\n      .map(r => r._id);\n    const messagesToPurge = messages\n      .filter(m => m.reported_date < oldMessages)\n      .map(m => m._id);\n\n    return [...reportsToPurge, ...messagesToPurge];\n  }"
  }
}
