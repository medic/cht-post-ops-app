{
  "locales": [
    {
      "code": "en",
      "name": "English"
    },
    {
      "code": "es",
      "name": "Español (Spanish)"
    },
    {
      "code": "fr",
      "name": "Français (French)"
    },
    {
      "code": "ne",
      "name": "नेपाली (Nepali)"
    },
    {
      "code": "sw",
      "name": "Kiswahili (Swahili)"
    }
  ],
  "locale": "en",
  "locale_outgoing": "en",
  "muvuku_webapp_url": "/medic-reporter/_design/medic-reporter/_rewrite/?_embed_mode=2&_locale=en#/generic-anc.json",
  "date_format": "ddd, MMM Do, YYYY",
  "reported_date_format": "ddd, MMM Do, YYYY [at] h:mm A",
  "forms_only_mode": false,
  "default_responses": {
    "start_date": "1970-01-01"
  },
  "district_admins_access_unallocated_messages": true,
  "public_access": false,
  "default_country_code": "263",
  "gateway_number": "+263782492877",
  "kujua-reporting": [
    {
      "code": "",
      "reporting_freq": "weekly"
    }
  ],
  "anc_forms": {},
  "schedule_morning_hours": 6,
  "schedule_morning_minutes": 0,
  "schedule_evening_hours": 20,
  "schedule_evening_minutes": 0,
  "synthetic_date": "",
  "contact_display_short": "clinic.name",
  "permissions": {
    "can_export_messages": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "analytics"
    ],
    "can_export_forms": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "analytics"
    ],
    "can_export_contacts": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_export_audit": [
      "national_admin"
    ],
    "can_export_feedback": [
      "national_admin"
    ],
    "can_export_server_logs": [
      "national_admin"
    ],
    "can_view_analytics": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "analytics"
    ],
    "can_view_data_records": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only",
      "analytics",
      "gateway"
    ],
    "can_view_unallocated_data_records": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only",
      "gateway"
    ],
    "can_view_users": [
      "national_admin",
      "read_only"
    ],
    "can_edit": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "gateway"
    ],
    "can_update_messages": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "gateway"
    ],
    "can_update_reports": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_update_users": [
      "national_admin"
    ],
    "can_update_people": [
      "national_admin",
      "super_nurse"
    ],
    "can_update_places": [
      "national_admin"
    ],
    "can_create_records": [
      "national_admin",
      "district_admin",
      "super_nurse",
      "data_entry",
      "gateway"
    ],
    "can_access_gateway_api": [
      "gateway"
    ],
    "can_create_users": [
      "national_admin"
    ],
    "can_create_people": [
      "national_admin",
      "super_nurse"
    ],
    "can_create_places": [
      "national_admin"
    ],
    "can_view_tasks": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_view_tasks_tab": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_configure": [
      "national_admin"
    ],
    "can_view_messages": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only"
    ],
    "can_view_messages_tab": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only"
    ],
    "can_view_reports": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only"
    ],
    "can_view_reports_tab": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only"
    ],
    "can_view_analytics_tab": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_view_contacts": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only"
    ],
    "can_view_contacts_tab": [
      "national_admin",
      "super_nurse",
      "district_admin",
      "read_only"
    ],
    "can_edit_profile": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_delete_reports": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_bulk_delete_reports": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_delete_contacts": [
      "national_admin",
      "super_nurse"
    ],
    "can_delete_messages": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_delete_users": [
      "national_admin"
    ],
    "can_view_message_action": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_view_call_action": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_verify_reports": [
      "national_admin",
      "super_nurse",
      "district_admin"
    ],
    "can_log_out_on_android": []
  },
  "roles": {
    "data_entry": {
      "name": "usertype.data-entry"
    },
    "analytics": {
      "name": "usertype.analytics"
    },
    "gateway": {
      "name": "usertype.gateway"
    },
    "national_admin": {
      "name": "usertype.national-manager"
    },
    "super_nurse": {
      "name": "usertype.super-nurse",
      "offline": true
    },
    "district_admin": {
      "name": "usertype.district-manager",
      "offline": true
    },
    "read_only": {
      "name": "usertype.read-only"
    }
  },
  "setup_complete": true,
  "care_coordinator": "chw",
  "anc_registration_lmp": true,
  "statistics_submission": "none",
  "outgoing_phone_replace": {
    "match": "",
    "replace": ""
  },
  "outgoing_phone_filters": [
    {
      "match": "",
      "replace": ""
    }
  ],
  "id_format": "1111",
  "statistics_submission_number": "",
  "replication_depth": [
    {
      "role": "",
      "depth": 2
    }
  ],
  "alerts": [
    {
      "form": "",
      "condition": "",
      "message": "",
      "recipient": ""
    }
  ],
  "reminders": [
    {
      "form": "",
      "text_expression": "",
      "cron": "",
      "mute_after_form_for": "",
      "message": ""
    }
  ],
  "registrations": [
    {
      "form": "0",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "1",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "Y",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    },
    {
      "form": "N",
      "fields": [],
      "events": [],
      "validations": {},
      "messages": []
    }
  ],
  "patient_reports": [
    {
      "form": "followup",
      "validations": {},
      "messages": []
    },
    {
      "form": "day14review",
      "validations": {},
      "messages": []
    }
  ],
  "schedules": [],
  "tasks": {
    "rules": "define Target { _id: null, contact: null, deleted: null, type: null, pass: null, date: null, groupBy: null }\ndefine Contact { contact: null, reports: null, tasks: null }\ndefine Task { _id: null, deleted: null, doc: null, contact: null, icon: null, date: null, readyStart: null, readyEnd: null, title: null, fields: null, resolved: null, priority: null, priorityLabel: null, reports: null, actions: null }\nrule GenerateEvents {\n  when { c: Contact } then { /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*\nDeclarative tasks and targets (the elements exported by partner task.js and target.js files), are complex objects containing functions. \nDefinition-preparation.js binds a value for `this` in all the functions within a definition. \nThis fascilitates simple data sharing between functions, and allows function logic to reference the definition itself.\n*/\n\nfunction prepare(definition) {\n  var targetContext = {};\n  bindAllFunctionsToContext(definition, targetContext);\n  targetContext.definition = deepCopy(definition);\n}\n\nfunction bindAllFunctionsToContext(obj, context) {\n  var keys = Object.keys(obj);\n  for (var i in keys) {\n    var key = keys[i];\n    switch(typeof obj[key]) {\n      case 'object':\n        bindAllFunctionsToContext(obj[key], context);\n        break;\n      case 'function':\n        obj[key] = obj[key].bind(context);\n        break;\n    }\n  }\n}\n\nfunction deepCopy(obj) {\n  var copy = Object.assign({}, obj);\n  var keys = Object.keys(copy);\n  for (var i in keys) {\n    var key = keys[i];\n    if (Array.isArray(copy[key])) {\n      copy[key] = copy[key].slice(0);\n      for (var j = 0; j < copy[key].length; ++j) {\n        if (typeof copy[key][j] === 'object') {\n          copy[key][j] = deepCopy(copy[key][j]);\n        }\n      }\n    } else if (typeof copy[key] === 'object') {\n      copy[key] = deepCopy(copy[key]);\n    }\n  }\n  return copy;\n}\n\nmodule.exports = prepare;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* global c, emit, Task, Target */\n\nvar tasks = __webpack_require__(2);\nvar targets = __webpack_require__(3);\n\nvar taskEmitter = __webpack_require__(4); \nvar targetEmitter = __webpack_require__(5);\n\ntargetEmitter(targets, c, Utils, Target, emit);\ntaskEmitter(tasks, c, Utils, Task, emit);\n\nemit('_complete', { _id: true });\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = [\r\n  {\r\n    name: 'day2-sms',\r\n    icon: 'treatment',\r\n    title: 'task.day2-sms.title',\r\n    appliesTo: 'contacts',\r\n    appliesToType: ['person'],\r\n    appliesIf: (contact) => {\r\n      return contact.contact.randomization && contact.contact.randomization === 'texting';\r\n    },\r\n    resolvedIf: (contact, report, event, dueDate) => {\r\n      return Utils.isFormSubmittedInWindow(\r\n        contact.reports,\r\n        'day2_sms',\r\n        Utils.addDate(dueDate, -event.start).getTime(),\r\n        Utils.addDate(dueDate, event.end + 1).getTime()\r\n      );\r\n    },\r\n    actions: [{\r\n      form: 'day2_sms',\r\n      label: 'Follow up client'\r\n    }],\r\n    events: [{\r\n      id: 'sms-followup-day-2',\r\n      days: 2,\r\n      start: 0,\r\n      end: 365\r\n    }]\r\n  },\r\n\r\n  {\r\n    name: 'day7-sms',\r\n    icon: 'treatment',\r\n    title: 'task.day7-sms.title',\r\n    appliesTo: 'contacts',\r\n    appliesToType: ['person'],\r\n    appliesIf: (contact) => {\r\n      return contact.contact.randomization && contact.contact.randomization === 'texting';\r\n    },\r\n    resolvedIf: (contact, report, event, dueDate) => {\r\n      return Utils.isFormSubmittedInWindow(\r\n        contact.reports,\r\n        'day7_sms',\r\n        Utils.addDate(dueDate, -event.start).getTime(),\r\n        Utils.addDate(dueDate, event.end + 1).getTime()\r\n      );\r\n    },\r\n    actions: [{\r\n      form: 'day7_sms',\r\n      label: 'Follow up client'\r\n    }],\r\n    events: [{\r\n      id: 'sms-followup-day-7',\r\n      days: 7,\r\n      start: 0,\r\n      end: 365\r\n    }]\r\n  },\r\n\r\n  {\r\n    name: 'followup-day-14',\r\n    icon: 'treatment',\r\n    title: 'task.followup-day-14.title',\r\n    appliesTo: 'contacts',\r\n    appliesToType: ['person'],\r\n    appliesIf: (contact) => {\r\n      return !!contact.contact.randomization;\r\n    },\r\n    resolvedIf: (contact) => {\r\n      return contact.reports.some(function (rep) {\r\n        return rep.form === 'client_visit' && rep.fields.visit === 'day14';\r\n      });\r\n    },\r\n    actions: [{\r\n      form: 'client_visit',\r\n      label: '14 Day Follow up client',\r\n    }],\r\n    events: [{\r\n      id: 'followup-day-14',\r\n      days: 14,\r\n      start: 2,\r\n      end: 365\r\n    }]\r\n  },\r\n\r\n  {\r\n    name: 'ae-referral',\r\n    icon: 'treatment',\r\n    title: 'task.ae-referral.title',\r\n    appliesTo: 'reports',\r\n    appliesToType: ['potential_ae'],\r\n    appliesIf: (contact, report) => { return Utils.getField(report, 'note.client_return') === 'yes'; },\r\n    resolvedIf: (contact, report, event, dueDate) => {\r\n      return Utils.isFormSubmittedInWindow(\r\n        contact.reports,\r\n        'referral_confirmation',\r\n        Utils.addDate(dueDate, -event.start).getTime(),\r\n        Utils.addDate(dueDate, event.end + 1).getTime()\r\n      );\r\n    },\r\n    actions: [{\r\n      form: 'referral_confirmation',\r\n      label: 'SMS Referral',\r\n    }],\r\n    events: [{\r\n      id: 'ae-referral',\r\n      days: 2,\r\n      start: 2,\r\n      end: 365\r\n    }]\r\n  },\r\n\r\n  {\r\n    name: 'no-contact',\r\n    icon: 'off',\r\n    title: 'task.no-contact.title',\r\n    appliesTo: 'reports',\r\n    appliesToType: ['enroll'],\r\n    resolvedIf: (contact, report, event, dueDate) => {\r\n      const noContactAlreadySubmitted = Utils.isFormSubmittedInWindow(\r\n        contact.reports,\r\n        'no_contact',\r\n        Utils.addDate(dueDate, -event.start).getTime(),\r\n        Utils.addDate(dueDate, event.end + 1).getTime()\r\n      );\r\n\r\n      const someReportSubmitted = ['0', '1'].some((rep) => Utils.isFormSubmittedInWindow(\r\n        contact.reports,\r\n        rep,\r\n        report.reported_date,\r\n        Utils.addDate(dueDate, 1).getTime())\r\n      );\r\n\r\n      return noContactAlreadySubmitted || someReportSubmitted;\r\n    },\r\n    actions: [{\r\n      form: 'no_contact',\r\n      label: 'No Contact',\r\n      modifyContent: function (content) {\r\n        content.is_task = true;\r\n      }\r\n    }],\r\n    events: [{\r\n      days: 8,\r\n      start: 0,\r\n      end: 365\r\n    }]\r\n  }\r\n\r\n];\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = [];\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar prepareDefinition = __webpack_require__(0);\n\nfunction taskEmitter(taskDefinitions, c, Utils, Task, emit) {\n  if (!taskDefinitions) return;\n\n  var taskDefinition, r;\n  for (var idx1 = 0; idx1 < taskDefinitions.length; ++idx1) {\n    taskDefinition = taskDefinitions[idx1];\n    prepareDefinition(taskDefinition);\n\n    switch (taskDefinition.appliesTo) {\n      case 'reports':\n      case 'scheduled_tasks':\n        for (var idx2=0; idx2<c.reports.length; ++idx2) {\n          r = c.reports[idx2];\n          emitTasks(taskDefinition, Utils, Task, emit, c, r);\n        }\n        break;\n      case 'contacts':\n        if (c.contact) {\n          emitTasks(taskDefinition, Utils, Task, emit, c);\n        }\n        break;\n      default:\n        throw new Error('Unrecognised task.appliesTo: ' + taskDefinition.appliesTo);\n    }\n  }\n}\n\nfunction emitTasks(taskDefinition, Utils, Task, emit, c, r) {\n  var i;\n\n  if (taskDefinition.appliesToType) {\n    var type;\n    if (taskDefinition.appliesTo === 'contacts') {\n      if (!c.contact) {\n        // no assigned contact - does not apply\n        return;\n      }\n      type = c.contact.type === 'contact' ? c.contact.contact_type : c.contact.type;\n    } else {\n      if (!r) {\n        // no report - does not apply\n        return;\n      }\n      type = r.form;\n    }\n    if (taskDefinition.appliesToType.indexOf(type) === -1) {\n      // does not apply to this type\n      return;\n    }\n  }\n\n  if (taskDefinition.appliesTo !== 'scheduled_tasks' && taskDefinition.appliesIf && !taskDefinition.appliesIf(c, r)) {\n    return;\n  }\n\n  if (taskDefinition.appliesTo === 'scheduled_tasks'){\n    if (r && taskDefinition.appliesIf) {\n      if (!r.scheduled_tasks) {\n        return;\n      }\n\n      for (i = 0; i < r.scheduled_tasks.length; i++) {\n        if (taskDefinition.appliesIf(c, r, i)) {\n          emitForEvents(i);\n        }\n      }\n    }\n  } else {\n    emitForEvents();\n  }\n\n  function obtainContactLabelFromSchedule(taskDefinition, c, r) {\n    var contactLabel;\n    if (typeof taskDefinition.contactLabel === 'function') {\n      contactLabel = taskDefinition.contactLabel(c, r);\n    } else {\n      contactLabel = taskDefinition.contactLabel;\n    }\n  \n    return contactLabel ? { name: contactLabel } : c.contact;\n  }  \n\n  function emitForEvents(scheduledTaskIdx) {\n    var i, dueDate = null, event, priority, task;\n    for (i = 0; i < taskDefinition.events.length; i++) {\n      event = taskDefinition.events[i];\n\n      if (event.dueDate) {\n        dueDate = event.dueDate(event, c, r, scheduledTaskIdx);\n      } else if (r) {\n        if (scheduledTaskIdx !== undefined) {\n          dueDate = new Date(Utils.addDate(new Date(r.scheduled_tasks[scheduledTaskIdx].due), event.days));\n        } else {\n          dueDate = new Date(Utils.addDate(new Date(r.reported_date), event.days));\n        }\n      } else {\n        if (event.dueDate) {\n          dueDate = event.dueDate(event, c);\n        } else {\n          var defaultDueDate = c.contact && c.contact.reported_date ? new Date(c.contact.reported_date) : new Date();\n          dueDate = new Date(Utils.addDate(defaultDueDate, event.days));\n        }\n      }\n\n      if (!Utils.isTimely(dueDate, event)) {\n        continue;\n      }\n\n      task = {\n        // One task instance for each event per form that triggers a task, not per contact\n        // Otherwise they collide when contact has multiple reports of the same form\n        _id: (r ? r._id : c.contact && c.contact._id) + '~' + (event.id || i) + '~' + taskDefinition.name,\n        deleted: !!((c.contact && c.contact.deleted) || r ? r.deleted : false),\n        doc: c,\n        contact: obtainContactLabelFromSchedule(taskDefinition, c, r),\n        icon: taskDefinition.icon,\n        date: dueDate,\n        readyStart: event.start || 0,\n        readyEnd: event.end || 0,\n        title: taskDefinition.title,\n        resolved: taskDefinition.resolvedIf(c, r, event, dueDate, scheduledTaskIdx),\n        actions: taskDefinition.actions.map(initActions),\n      };\n\n      if (scheduledTaskIdx !== undefined) {\n        task._id += '-' + scheduledTaskIdx;\n      }\n\n      priority = taskDefinition.priority;\n      if (typeof priority === 'function') {\n        priority = priority(c, r);\n      }\n\n      if (priority) {\n        task.priority = priority.level;\n        task.priorityLabel = priority.label;\n      }\n\n      emit('task', new Task(task));\n    }\n  }\n\n  function initActions(def) {\n    var appliesToReport = !!r;\n    var content = {\n      source: 'task',\n      source_id: appliesToReport ? r._id : c.contact && c.contact._id,\n      contact: c.contact,\n    };\n\n    if (def.modifyContent) {\n      def.modifyContent(content, c, r);\n    }\n\n    return {\n      type: 'report',\n      form: def.form,\n      label: def.label || 'Follow up',\n      content: content,\n    };\n  }\n}\n\nmodule.exports = taskEmitter;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar prepareDefinition = __webpack_require__(0);\n\nfunction targetEmitter(targets, c, Utils, Target, emit) {\n  for (var idx1 = 0; idx1 < targets.length; ++idx1) {\n    var target = targets[idx1];\n    prepareDefinition(target);\n\n    switch (target.appliesTo) {\n      case 'contacts':\n        emitTargetFor(target, Target, Utils, emit, c);\n        break;\n      case 'reports':\n        for (var idx2 = 0; idx2 < c.reports.length; ++idx2) {\n          var r = c.reports[idx2];\n          emitTargetFor(target, Target, Utils, emit, c, r);\n        }\n        break;\n      default:\n        throw new Error('Unrecognised target.appliesTo: ' + target.appliesTo);\n    }\n  }\n}\n\nfunction determineDate(targetConfig, Utils, c, r) {\n  if (typeof targetConfig.date === 'function') {\n    return targetConfig.date(c, r);\n  }\n  \n  if (targetConfig.date === undefined || targetConfig.date === 'now') {\n    return Utils.now().getTime();\n  }\n\n  if (targetConfig.date === 'reported') {\n    return r ? r.reported_date : c.contact.reported_date;\n  }\n  \n  throw new Error('Unrecognised value for target.date: ' + targetConfig.date);\n}\n\nfunction determineInstanceIds(targetConfig, c, r) {\n  var instanceIds;\n  if (typeof targetConfig.idType === 'function') {\n    instanceIds = targetConfig.idType(c, r);\n  } else if (targetConfig.idType === 'report') {\n    instanceIds = r && r._id;\n  } else {\n    instanceIds = c.contact && c.contact._id;\n  }\n\n  if (!Array.isArray(instanceIds)) {\n    instanceIds = [instanceIds];\n  }\n\n  return instanceIds;\n}\n\nfunction emitTargetFor(targetConfig, Target, Utils, emit, c, r) {\n  var isEmittingForReport = !!r;\n  if (!c.contact) return;\n  var contactType = c.contact.contact_type || c.contact.type;\n  var appliesToKey = isEmittingForReport ? r.form : contactType;\n  if (targetConfig.appliesToType && targetConfig.appliesToType.indexOf(appliesToKey) < 0) return;\n  if (targetConfig.appliesIf && !targetConfig.appliesIf (c, r)) return;\n\n  var instanceDoc = isEmittingForReport ? r : c.contact;\n  var instanceIds = determineInstanceIds(targetConfig, c, r);\n  var pass = !targetConfig.passesIf || !!targetConfig.passesIf(c, r);\n  var date = determineDate(targetConfig, Utils, c, r);\n  var groupBy = targetConfig.groupBy && targetConfig.groupBy(c, r);\n\n  function emitTargetInstance(i) {\n    emit('target', i);\n  }\n\n  for (var i = 0; i < instanceIds.length; ++i) {\n    var instance = new Target({\n      _id: instanceIds[i] + '~' + targetConfig.id,\n      contact: c.contact,\n      deleted: !!instanceDoc.deleted,\n      type: targetConfig.id,\n      pass: pass,\n      groupBy: groupBy,\n      date: date,\n    });\n\n    if (targetConfig.emitCustom) {\n      targetConfig.emitCustom(emitTargetInstance, instance, c, r);\n    } else {\n      emitTargetInstance(instance);\n    }\n  }\n}\n\nmodule.exports = targetEmitter;\n\n\n/***/ })\n/******/ ]); }\n}",
    "targets": {
      "enabled": true,
      "items": []
    }
  },
  "forms": {
    "0": {
      "meta": {
        "label": {
          "en": "No AE Experienced"
        },
        "code": "0"
      },
      "fields": {
        "patient_name": {
          "labels": {
            "tiny": {
              "en": "patient_name"
            },
            "description": {
              "en": "Patient name"
            },
            "short": {
              "en": "Patient name"
            }
          },
          "position": 0,
          "type": "string",
          "required": false
        }
      },
      "use_sentinel": true
    },
    "1": {
      "meta": {
        "label": {
          "en": "Suspected AE Reported"
        },
        "code": "1",
        "icon": "risk"
      },
      "fields": {
        "patient_name": {
          "labels": {
            "tiny": {
              "en": "patient_name"
            },
            "description": {
              "en": "Patient name"
            },
            "short": {
              "en": "Patient name"
            }
          },
          "position": 0,
          "type": "string",
          "required": false
        }
      }
    },
    "N": {
      "meta": {
        "label": {
          "en": "Does NOT recommend MC",
          "icon": "not-recommend"
        },
        "code": "N"
      },
      "fields": {},
      "use_sentinel": true
    },
    "Y": {
      "meta": {
        "label": {
          "en": "Recommends MC"
        },
        "code": "Y",
        "icon": "recommend"
      },
      "fields": {},
      "use_sentinel": true
    }
  },
  "transitions": {
    "default_responses": false,
    "update_clinics": true,
    "accept_patient_reports": true,
    "conditional_alerts": false,
    "update_sent_by": false,
    "registration": true,
    "update_notifications": true,
    "update_scheduled_reports": false,
    "multi_report_alerts": false,
    "update_sent_forms": false,
    "generate_patient_id_on_people": true,
    "mark_for_outbound": true,
    "muting": true
  },
  "outbound": {
    "textit-scheduled-msg": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'enroll'",
      "destination": {
        "base_url": "https://textit.in",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "textit.in"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'a4c1f171-24f9-427b-aafe-4dbf1f85857b'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        },
        "extra.language": {
          "expr": "doc.fields.language_preference",
          "optional": false
        },
        "extra.date": {
          "expr": "new Date(doc.reported_date).getDate()+'-'+ (new Date(doc.reported_date).getMonth()+1) +'-' + new Date(doc.reported_date).getFullYear()+ ' ' + new Date(doc.reported_date).getHours() + ':' +  new Date(doc.reported_date).getMinutes()",
          "optional": false
        },
        "extra.name": {
          "expr": "doc.fields.patient_name",
          "optional": false
        },
        "extra.group": {
          "expr": "doc.fields.randomization",
          "optional": false
        }
      }
    },
    "textit-gateway": {
      "relevant_to": "doc.type === 'data_record' && doc.tasks && doc.tasks[0] && doc.tasks[0].state && doc.tasks[0].state === 'pending'",
      "destination": {
        "base_url": "https://textit.in",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "textit.in"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'1cd8f9d5-e16c-4e7c-a5a6-6220d71a8a29'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.tasks[0].messages[0].to ]",
          "optional": false
        }
      }
    },
    "textit-muting": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'mute'",
      "destination": {
        "base_url": "https://textit.in",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "textit.in"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'58c34f10-a856-486f-8994-883bd7fdd28c'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        }
      }
    },
    "textit-unmuting": {
      "relevant_to": "doc.type === 'data_record' && doc.form === 'unmute'",
      "destination": {
        "base_url": "https://textit.in",
        "auth": {
          "type": "header",
          "name": "Authorization",
          "value_key": "textit.in"
        },
        "path": "/api/v2/flow_starts.json"
      },
      "mapping": {
        "flow": {
          "expr": "'2920d430-589f-4973-96d9-2a58f8eaea95'"
        },
        "urns": {
          "expr": "[ 'tel:' + doc.fields.phone ]",
          "optional": false
        }
      }
    }
  },
  "_version": "3.9.0",
  "contact_summary": "var ContactSummary = {}; (function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(ContactSummary, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar contactSummary = __webpack_require__(1);\nvar contactSummaryEmitter = __webpack_require__(2);\n\nmodule.exports = contactSummaryEmitter(contactSummary, contact, reports);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nconst thisContact = contact;\r\nconst thisLineage = lineage;\r\n\r\nconst isPatient = () => (thisContact.role === 'patient' || !thisContact.role);\r\n\r\n\r\nconst fields = [\r\n    { appliesToType: ['person'], label: 'person.field.phone', value: thisContact.phone, width: 6, filter: 'phone' },\r\n    { appliesToType: ['person'], appliesIf: isPatient, label: 'person.field.group', value: 'person.field.group.' + thisContact.randomization, width: 6, translate: true  },\r\n    { appliesToType: ['person'], appliesIf: isPatient, label: 'person.field.vmmc_no', value: thisContact.vmmc_no, width: 6  },\r\n    { appliesToType: ['person'], appliesIf: isPatient, label: 'person.field.study_no', value: thisContact.study_no, width: 6  },\r\n    { appliesToType: ['person'], appliesIf: isPatient, label: 'person.field.language', value: 'person.field.language.' + thisContact.language_preference, width: 6, translate: true  },\r\n    { appliesToType: ['person', 'nurse'], label: 'contact.parent', value: thisLineage, filter: 'lineage' },\r\n    { appliesToType: ['district_hospital', 'health_center'], label: 'Contact', value: thisContact.contact && thisContact.contact.name, width: 6 },\r\n    { appliesToType: ['district_hospital', 'health_center'], label: 'person.field.phone', value: thisContact.contact && thisContact.contact.phone, width: 6 },\r\n    { appliesToType: ['district_hospital', 'health_center'], label: 'External ID', value: thisContact.external_id, width: 4 },\r\n    { appliesToType: ['district_hospital', 'health_center'], appliesIf: function () { return thisContact.parent && thisLineage[0]; }, label: 'contact.parent', value: thisLineage, filter: 'lineage' },\r\n\r\n];\r\n\r\nmodule.exports = {\r\n    fields: fields\r\n};\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nfunction emitter(contactSummary, contact, reports) {\n  var fields = contactSummary.fields || [];\n  var context = contactSummary.context || {};\n  var cards = contactSummary.cards || [];\n\n  var contactType = contact && (contact.contact_type || contact.type);\n\n  var result = {\n    cards: [],\n    fields: fields.filter(function(f) {\n      var appliesToType = convertToArray(f.appliesToType);\n      var appliesToNotType = appliesToType.filter(function(type) {\n        return type && type.charAt(0) === '!';\n      });\n      if (appliesToType.includes(contactType) ||\n          (appliesToNotType.length > 0 && !appliesToNotType.includes('!' + contactType))) {\n        if (!f.appliesIf || f.appliesIf()) {\n          delete f.appliesToType;\n          delete f.appliesIf;\n          return true;\n        }\n      }\n    }),\n  };\n\n  cards.forEach(function(card) {\n    var idx1, r, added;\n\n    var appliesToType = convertToArray(card.appliesToType);\n\n    if (appliesToType.includes('report') && appliesToType.length > 1) {\n      throw new Error(\"You cannot set appliesToType to an array which includes the type 'report' and another type.\");\n    }\n    \n    if (appliesToType.includes('report')) {\n      for (idx1=0; idx1<reports.length; ++idx1) {\n        r = reports[idx1];\n        if (!isReportValid(r)) {\n          continue;\n        }\n\n        added = addCard(card, context, r);\n        if (added) {\n          result.cards.push(added);\n        }\n      }\n    } else {\n      if (!appliesToType.includes(contactType)) {\n        return;\n      }\n\n      added = addCard(card, context);\n      if (added) {\n        result.cards.push(added);\n      }\n    }\n  });\n\n  result.context = context;\n\n  // return the result for 2.13+ as per #2635\n  return result;\n}\n\nfunction convertToArray(appliesToType) {\n  return Array.isArray(appliesToType) ? appliesToType : [appliesToType];  \n}\n\nfunction isReportValid(report) {\n  // valid XForms won't have .errors field\n  // valid JSON forms will have empty array errors:[]\n  return report && !(report.errors && report.errors.length);\n}\n\nfunction execAppliesIf(prop, report) {\n  switch(typeof prop) {\n    case 'undefined': return true;\n    case 'function':  return prop(report);\n    default:          return prop;\n  }\n}\n\nfunction addCard(card, context, r) {\n  if (!execAppliesIf(card.appliesIf, r)) {\n    return;\n  }\n\n  function addValue(src, dst, prop) {\n    switch(typeof src[prop]) {\n      case 'undefined': return;\n      case 'function': dst[prop] = src[prop](r); break;\n      default: dst[prop] = src[prop];\n    }\n  }\n\n  var fields = typeof card.fields === 'function' ?\n      card.fields(r) :\n      card.fields\n        .filter(function(f) {\n          return execAppliesIf(f.appliesIf, r);\n        })\n        .map(function(f) {\n          var ret = {};\n          addValue(f, ret, 'label');\n          addValue(f, ret, 'value');\n          addValue(f, ret, 'translate');\n          addValue(f, ret, 'filter');\n          addValue(f, ret, 'width');\n          addValue(f, ret, 'icon');\n          if (f.context) {\n            ret.context = {};\n            addValue(f.context, ret.context, 'count');\n            addValue(f.context, ret.context, 'total');\n          }\n          return ret;\n        });\n\n  if (card.modifyContext) {\n    card.modifyContext(context, r);\n  }\n\n  return {\n    label: card.label,\n    fields: fields,\n  };\n}\n\nmodule.exports = emitter;\n\n\n/***/ })\n/******/ ]);\n}); return ContactSummary;",
  "place_hierarchy_types": [
    "district_hospital",
    "health_center"
  ],
  "changes_controller": {
    "reiterate_changes": true,
    "changes_limit": 100,
    "debounce_interval": 200
  },
  "sms": {
    "outgoing_service": "medic-gateway"
  },
  "replications": [
    {
      "fromSuffix": "user-[^\\-]+-meta",
      "toSuffix": "users-meta",
      "text_expression": "",
      "cron": "0 2 * * *"
    }
  ],
  "contact_types": [
    {
      "id": "district_hospital",
      "name_key": "contact.type.district_hospital",
      "group_key": "contact.type.district_hospital.plural",
      "create_key": "contact.type.district_hospital.new",
      "edit_key": "contact.type.place.edit",
      "icon": "medic-district-hospital",
      "create_form": "form:contact:district_hospital:create",
      "edit_form": "form:contact:district_hospital:edit"
    },
    {
      "id": "health_center",
      "name_key": "contact.type.health_center",
      "group_key": "contact.type.health_center.plural",
      "create_key": "contact.type.health_center.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "district_hospital"
      ],
      "icon": "medic-health-center",
      "create_form": "form:contact:health_center:create",
      "edit_form": "form:contact:health_center:edit"
    },
    {
      "id": "clinic",
      "name_key": "contact.type.clinic",
      "group_key": "contact.type.clinic.plural",
      "create_key": "contact.type.clinic.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "health_center"
      ],
      "icon": "medic-clinic",
      "count_visits": true
    },
    {
      "id": "person",
      "name_key": "contact.type.person",
      "group_key": "contact.type.person.plural",
      "create_key": "contact.type.person.new",
      "edit_key": "contact.type.person.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "person": true
    },
    {
      "id": "nurse",
      "name_key": "contact.type.nurse",
      "group_key": "contact.type.nurse.plural",
      "create_key": "contact.type.nurse.new",
      "edit_key": "contact.type.nurse.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "nurse",
      "create_form": "form:contact:nurse:create",
      "edit_form": "form:contact:nurse:create",
      "person": true
    }
  ],
  "muting": {
    "mute_forms": [
      "mute"
    ],
    "unmute_forms": [
      "unmute"
    ],
    "validations": {
      "join_responses": true,
      "list": []
    }
  }
}
